services:
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.6.0
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - devtrack-net

  # kafka:
  #   image: confluentinc/cp-kafka:7.6.0
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   healthcheck:
  #     test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   networks:
  #     - devtrack-net

  # kafka-ui:
  #   image: provectuslabs/kafka-ui
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local-kafka
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
  #     - DYNAMIC_CONFIG_ENABLED=true
  #   networks:
  #     - devtrack-net
  #   depends_on:
  #     - kafka

  # postgres:
  #   image: postgres:15
  #   container_name: postgres
  #   restart: always
  #   environment:
  #     POSTGRES_USER: logadmin
  #     POSTGRES_PASSWORD: logpass
  #     POSTGRES_DB: logs_db
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data

  # elasticsearch:
  #   image: elasticsearch:8.12.0
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  
  # api_service:
  #   build:
  #     context: .
  #     dockerfile: docker/api_service/Dockerfile
  #   container_name: api_services
  #   volumes:
  #     - ./api_service:/code
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - kafka
  #     - postgres

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    # depends_on:
    #   - api_service

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus

  # log_producer:
  #   build:
  #     context: .
  #     dockerfile: docker/log_producer/Dockerfile
  #   container_name: log_producer
  #   depends_on:
  #     - kafka
  #   restart: unless-stopped
  #   networks:
  #     - devtrack-net
  #   environment:
  #     - KAFKA_BROKER_URL=kafka:29092
  #     - LOG_RATE=10               # logs per second
  #     - LOG_SERVICE=auth-service  # example service name


  # log_consumer: 
  #   build:
  #     context: .
  #     dockerfile: docker/log_consumer/Dockerfile
  #   depends_on:
  #     - kafka
  #     - postgres
  #   restart: unless-stopped
  #   networks:
  #     - devtrack-net
  #   environment:
  #     - KAFKA_BROKER_URL=kafka:29092
  #     - POSTGRES_URL=postgresql://logadmin:logpass@postgres:5432/logs_db

# volumes:
#   postgres_data:
# #   grafana_data:
#   esdata:

# networks:
#   devtrack-net: